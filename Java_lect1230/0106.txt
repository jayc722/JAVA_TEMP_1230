
클래스와 객체
		클래스 선언, 객체 생성
		

클래스
		현실 정보를 코드로 구현


		선언방법 :  접근제어자 class 클래스명{

					//멤버변수

					//메소드

					//생성자


멤버변수(필드)	
		정보

		수치로 나타낼수 있는 것들

		'지역 변수'와 다르게 각 타입의 기본값으로 초기화가 됨


메소드
		기능

		기능을 구현하기 위해 모아놓은 코드

		좋은 메소드는 하나의 기능만 코드로 구현

		매개변수, 리턴타입, 메소드명 정하고 구현


매개변수
		메소드를 실행하기 위해 필요한 정보

		필수적인 것들만 넘겨주는 것이 좋다

		변수 앞에 각 타입을 반드시 써야함  //함수(int a, int b)


리턴타입
		메소드를 실행하고 알려줘야 하는 값들의 타입을 지정

		리턴타입은 하나만 올 수 있음.  >> 숫자와 문자 동시에 리턴 x
		
		return 키워드 이용해서 값을 반환


생성자
		주로 멤버변수를 초기화 할 때 사용

		기본생성자는 매개변수 x

		복사생성자는 매개번수가 클래스의 객체
		클래스와 같은 객체를 가지는 멤버변수를 만들고 싶을때(그냥 = 써버리면 객체 공유해버림)
		
			
			class A{
			
				public A(){		//기본 생성자

				}


				public A(A a){		//복사 생성자
		
				}		



		생성자 오버로딩을 이용하여 여러 생성자를 만들 수 있음





메소드 오버로딩
		같은 이름의 메소드가 여럿 있는 경우
		조건 	-매개변수 개수가 다름
			-매개변수 타입이 다름 (리턴타입은 관계x)

가변 매개변수
		매개변수의 개수가 정해지지 않을때
		조건	-타입이 같아야 함(하나의 타입만)
		...을 자료형과 변수명 사이에 입력해서 사용
		메소드에서 배열처럼 사용


접근제어자
		public protected(자식 클래스까지) default(같은 패키지까지/접근제어자 생략 시) privae(자신)


this	
		나 자신을 가리킬 때
		매개 변수명과 멤버 변수명이 같은 경우 사용

this()		
		생성자 오버로딩에 의해 생성된 다른 생성자 호출할 때 사용
		첫 줄에만 가능

static
		클래스가 관리하는 변수나 메소드를 선언할 때 사용
		객체없이 사용 가능 =>클래스를 통해 호출 가능


싱글톤
		하나의 객체만 생성해서 사용하는 패턴
		생성자가 private
		클래스 변수로 자기자신을 가짐
		getInstance 같은 public 메소드를 이용하여 생성된 객체를 가져옴

초기화 순서
		1. 변수 타입의 기본값 2. 명시적 초기화(선언시 옆에 초기화) 3. 초기화블록({} 안에 초기화를 하는 것) 4. 생성자 초기화(클래스 변수(static)은 초기화 안됨)
 




































