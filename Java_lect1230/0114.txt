노션 -> / 누르면 다양한 기능 나옴.
# 스페이스 : 제목1 ##스페이스 : 제목2
* 스페이스 / 숫자. 스페이스 목차(점/ 1.)
/코드 : 코드창(언어 검색 가능)
tab shift tab 들여쓰기
`글자` 글자 강조

자바 정리

@@변수@@			  
	
	변수 선언/자료형 변환

	자료형 변수명 = 값;
	자료형 변수명1 = 값1, 변수형2 = 값2;

	기본형 : 변수에 값을 저장 	문자 char (2바이트 -> 한글 가능. 특수: \n \t \r \b ... \u0000(유니코드값 16진수)) 
				정수 byte(1바이트 > 2의8제곱) shot int long(큰 수는 접미사 L,l을 붙여야함-기본 int이기때문)
				실수 float(4바이트, 소숫점 6자리, 접미사 f,F붙여야함-기본 double이기때문) double(8바이트, 소숫점 15자리) 
				논리 boolean(true false 값을 가짐)

	참조형 : 변수에 주소를 저장 	배열, 객체 등


	자료형 변환		변수/값(상수,리터럴)을 일시적으로 자료형을 변환할 때 사용

		(자료형)변수명;
		int num = (int)3.14;
		double result = 1 / (double)2
		double num2 = 1;	//자동자료형변환

 		자동 자료형변환(묵시적)	작은 바이트 -> 큰 바이트 변환
		강제 자료형변환(강제적)	큰 -> 작 데이터손실 일어날수있기때문 (예외 정수/정수)

	변수명 작성규칙 
		대소문자 구별
		같은 블록{} 내 중복 선언 불가 
		예약어 키워드(int char class ...) 사용 불가
		특수문자는 _ $ 만 가능

@@연산자@@

	연산자, 연산 결과

	대입 연산자 =	A를 B에 저장
		오->왼 저장 (오른쪽은 변수, 상수만)	
		==와 혼동하는 경우 조심(A는B이다 -> A는B와 같다로 기억)

	산술 연산자	+-*/%
		정수 (산술) 정수 -> 정수
			1 / 2 == 0
			1 + 3.0 = 4.0
		
		증감 ++ --
			전위형 ++변수 연산하고 실행
			후위형 변수++ 실행하고 연산

	비교 연산자 > < >= <= == !=
		숫자의 크기 비교
		결과가 true / false (조건식)
		참조변수는 ==와 != 만 사용 가능 // 보통은 equals 이용 (비교연산자 안쓴다고 보는게 좋음)

	논리 	&& || !
		결과가 true / false (조건식)
		


	복합 대입연산자
		연산자를 줄여씀 
		A += B

	조건 연산자
		간단한 조건문 나타낼때 사용하는 연산자
		조건식 ? 참 : 거짓 	boolean isEven = num % 2 ? true : false;
				String result = num % 2 ? "짝수" : "홀수";




@@@조건문@@@
	~이면 ...해라

	if문 : 모든 조건문 처리

	switch문 : 변수가 특정 값들을 활용해서 처리하는 경우, 변수 범위 비교 힘듦 case에는 정수 문자 문자열(상수)

	swith(변수){
		case 값1, 값2 :
		실행문1;
		break;
		}

	중첩조건문(조건문의 실행문으로 조건문)

@@@반복문@@@
	모든 반복문은 조건식이 참일때 계속 실행
		
	while문		
		while(조건식){
			실행문;
			}
	
	
	for문
		for(초기화; 조건식; 증감식){
			실행문;
			}

	do while문
		do{
			실행문;			
			}while(조건식);


	무한루프  반복문이 종료x -> 조건식이 무조건 참이거나 조건식에 사용되는 변수가 증/감 하지 않아 발생

	중첩 반복문 	반복문 안에 반복문
	
	break문 : 특정 상황 만족할 때 반복문 빠져나갈 때

	continue : 스킵. for -> 증감식 while ->조건식

	향상된for문



@@배열@@
		(의미와)자료형이 같은 변수들을 모아놓은 것
		int [] arr = new int [5]; 	//나쁜 배열) 1번지: 학생의 숫자 2번지: 학생1의 국어 성적 2번지: 학생2의 수학 성적
		
		int count = 5;		//의미 같은 변수들끼리 모아 놓을 것
		int [] kor = new int [5];
		int [] math = new int [5];
		int [] age = new int [5];

		int [] a, b; 	a, b 배열
		int c[], d;		->d는 int 변수
	

		배열은 0번지부터 (크기-1)번지 까지

	값 입력	배열명[번지] = 값;
		
		범위를 벗어나면 ArrayIndexOutOfBoundsException 발생
		배열.length

	복사	배열1 = 배열2; 하면 배열을 공유 -> 주소만 가져옴
					
		반복문으로 하나씩 복사 for(int i =0; i<arr11.lengtg; i++)arr2[i] = arr1.[i];
	
		System.arraycopy(arr1,시작지점,arr2,시작지점,arr1.length);


	향상된 for문
		전체 탐색.
		값을 활용. 수정x
		
		for(int i = 0; i < arr.length; i++){
			int tmp = arr[i];

			}

		for(int tmp : arr){
		
			} 



@@@클래스와 객체@@@

	객체지향 프로그래밍(OOP) 객체를 정의하고 객체 간 협력을 프로그래밍 하는 것
	object oriented programming

	
	클래스
		현실의 정보를 코드로 구현한 것
		
		1. 멤버변수,필드	
			수치로 표현할 수 있는 정보
			각 자료형에 맞게 자동으로 초기화 됨
		2. 메소드
			기능 : 하나의 작업을 하는 코드들의 집합
			사용하고 싶을 때 호출해서 사용하면 됨
		3. 생성자
			필드를 초기화 하는 곳.		
			객체 생성하고 초기화할 때만 사용 => 원할 때 마음대로 호출 x

	메소드 
		메소드명
			
		매개변수
			메소드를 실행하기 위해 반드시 필요한 정보
		리턴타입
			메소드 실행 후 돌려주는 값들의 '자료형'
			return 키워드를 통해서 값을 반환 (void의 경우 없어도 됨)


		가변 매개변수
			매개변수 개수 고정x
			자료형이 같은 경우에만 사용.
			메소드 안에서 배열처럼 사용
			public static int sum (int ... nums){ nums.length 사용가능}

		메소드 오버로딩
			같은 이름의 메소드 여러 개일 경우
			
			매개변수가 다름
				1.매개변수의 개수
				2.매개변수의 종류
	
	추상화 -현실의 정보를 클래스로 만든 것

	생성자
		필드를 초기화
		생성자명=클래스명
		리턴타입x
		생성자 오버로딩 ->다양한 생성자
	
	클래스 정의하기
		class 클래스명{
			//멤버변수

			//메소드

			//생성자
			클래스명(){ }
			클래스명(int num){
				this.num = num;
				}
			}

	객체 생성
		class A{
			int num;
			void print(){
				System.out.println(num);
				}
			A(){}
			A(int num){
				this.num = num;
				}
			}

		main(){
			A a = new A(10);
			}

	객체 사용
		a.num = 10;	//a라는 객체의 필드 num 에 10 을 저장
		a.print();		//a라는 객체의 메소드 print() 를 호출


	접근제어자
		클래스, 필드, 메소드 앞에 붙여 접근 범위를 지정

		public 모든 클래스 protected 자신 클래스, 같은 패키지, 자식 클래스 default(생략) 자신, 같은 패키지 private 자신

		정보은닉 -> 직접 제어 막음

	this 생성된 객체 스스로를 가리키는 예약어 / this.필드명 ->매개변수와 구분
	this() 이미 만들어진 다른 생성자 호출


	static 
		static 안 붙으면 : 객체 변수(필드), 객체 메소드		: 객체를 통해 호출
		static 이 붙으면 : 클래스 변수(필드), 클래스 메소드 	: 클래스를 통해 호출
	

	싱글톤
		클래스가 객체를 하나 미리 만들어 놓고, 만들어진 객체를 함께 사용
		생성자가 private
		클래스의 클래스 필드로 클래스의 객체가
		getInstance 같은 메소드를 이용하여 객체를 공유

		class A{
			private static A a = new A();
			private A(){ }
			public A getInstance(){
				return a;
				}
			}


	멤버변수 초기화
		1. 기본값 2. 명시적 초기화 3. 초기화 블록 4. 생성자



@@@@상속과 다형성@@@@

	다형성<형변환<상속

	클래스 상속
		부모 클래스의 메소드와 필드를 자식 클래스가 물려받는 것
		A is a B일때(is a 관계)

		상속 ->extends
		단일상속(하나밖에 못 옴.

		class Child extends Parent{

			}


	super	부모 클래스의 객체를 선택할 때 사용.
		자식 클래스에서 부모 클래스의 (필드나 )메소드 재정의 시 부모 클래스의 메소드 호출
		(오버라이딩)	

	super()	부모 클래스의 생성자 호출
		자식 클래스의 생성자에서


메소드 오버라이딩
		상속받은 부모 클래스의 메소드를 재정의

		오버라이드 어노테이션 @Override ->안해도 상관없는데 하면 문법체크


	클래스 형변환
		'상속관계'인 두 클래스에서 다른 클래스로 변환 -최상위조상 Object까지 가능

		업캐스팅
			자식 클래스의 객체 => 부모 클래스 객체
			자동

		다운캐스팅
			부모 클래스의 객체 => 자식 클래스 객체
			강제. 조건부.

		class Parent{}
		class Child extends Parent{}

		Main(){
			Child c = new Child();
			Parent p = c; //업캐스팅. 자동으로 가능

			Patent p = new Parent();
			Child c = p; //다운캐스팅. 에러발생

			Parent p= new Child();	//먼저 업캐스팅
			Child c = (Child)p;	//다운캐스팅 한정적 가능

			}

	instanceof 	객체가 특정 클래스로 형변환이 가능한지 알려주는 연산자

	


	다형성
		매개변수의 다형성
			메소드의 매개변수로 여러 클래스의 객체들이 올 때, 클래스의 객체들이 특정 클래스를 상속받은 경우
			매개변수로 부모 클래스의 객체를 지정하는 것

			class P{ 
				public void testP(){ }
				}
			class C1 extends P{ }
			class C2 extends P{ }			
			class C3 extends P{ }

			class Other{

				public void test(C1 c1){
					c1.testP();
					}			

				public void test(C2 c2){
					c2.testP();
					}				

				public void test(C3 c3){
					c3.testP();
					}	

				public void test(P p){
					p.testP();
					}	

		포함 다형성
			필드가 여러 클래스의 객체가 올수 있고, 여러 클래스의 객체들이 공통된 부모 클래스의 자식 클래스일 때
			필드의 타입을 부모 클래스의 객체로 지정하는 것

			class Tire{ }
			class HankookTire extends Tire{ }
			class KuhmhoTire extends Tire{ }
	
			class Car(){
				//HankookTire LeftFront = new KuhmhoTire();  //불가능

				Tire leftTire = new KuhmhoTire();		//업캐스팅 -> 가능 (포함)
				}

		(재정의 다형성)
	
		




	(추상 클래스)
		구현x클래스
		객체 직접 가질수 x
		추상메소드 가질수 있음
			선언부만 있고 구현부가 없는 메소드

			일반 메소드 : 리턴타입 메소드명 (매개변수){ }
			추상 메소드 : 리턴타입 메소드명 (매개변수);	//선언만 하고 구현 x

		추상 메소드를 가진 클래스를 상속한 경우 메소드 오버라이딩을 반드시 해줘야 일반 클래스로 만들 수 o


인터페이스
	클래스 / 프로그램이 제공하는 기능을 명시적으로 선언하는 역할
	목차 같은 역할(설명이 몇 페이지에 있는지)
	인터페이스에 있는 추상 메소드들은 public abstract가 자동으로 붙음
	변수는 앞에 public static final (클래스 상수)

	interface 키워드로 생성
	
	interface 인터페이스명{
		//추상 메소드

		//상수
		}


	인터페이스 다형성
		메소드의 매개변수로 인터페이스의 객체를 선언하면 매개변수에는 인터페이스의 구현 클래스 객체만 올수있음
			->람다식

	구현 클래스
		인터페이스는 메소드 구현부가 없기 때문에 객체생성 x
		인터페이스에서 구현한 구현 클래스가 필요
		implements 사용

		한 클래스는 여러 인터페이스 구현 가능

		interface A{ }
		interface B{ }

		class C implements A, B{ }


기본 클래스

	Object 
		모든 클래스의 조상 클래스
		모든 클래스는 Object의 기능 사용 가능(보통은 오버라이딩)

		equals, toString

		

예외처리
	예외가 발생할 수 있는 상황에서

	Exception 클래스
		모든 예외 클래스의 최상위 조상 클래스

	분류 
		RuntimeException
			실행 도중 발생하는 예외		
			NullPointerException		null 인 참조변수의 메소드나 필드에 접근
			ArrayIndexOutOfBoundsException	배열의 잘못된 번지에 접근	
			NumberFormatException		숫자 형태가 아닌 문자열을 숫자로 바꾸는 경우
			ClassCastException			클래스 형변환 할 수 없는 경우(다운캐스팅 불가)
			ArithmeticException		0으로 나눈 경우
			InputMissmatchExeption		숫자 입력해야하는데 문자/문자열 입력

		RuntimeException이 아닌 예외	
			코드상의 오류
			예외처리 하지 않으면 동작하지 않음
		

	try ~ catch ~ finally
		예외 발생 시 직접 처리하는 코드

		try 에는 예외 발생할수 있는 코드

		catch에는 예외 발생 시 처리할 예외 지정
			여러 catch 올 수 있음
			부모 예외는 자식 예외보다 위에 있을 수 없음

		finally 에는 예외가 발생하는 코드 다음에 무조건 실행하는 코드


		try{

			//예외 발생 코드

		}catch(예외 클래스1 e){		// ->밑에거보다 큰 클래스(특히 Exception) 올 수 x. 밑에 안 내려가기 때문
			//예외 처리
		}catch(예외 클래스2 e){
			//예외 처리
		}




	throws 	
		예외 발생 시 직접 처리하지 않고 일을 시킨 메소드에게 예외를 던질거라 표시
		throw 메소드 호출 시 발생할 수 있는 예외 표시


		리턴타입 메소드명(매개변수) throws 예외클래스1, 예외클래스2{
			//구현
			}


		throw -> 메소드에게 예외 던짐

			if(조건식){
				throw new 예외클래스명(메세지);
				}




제네릭 클래스

	필드나 메소드의 타입이 정해지지 않는 클래스 ->객체 생성 시 타입 결정

	class 클래스명<T>{

		}

	생성 : 
	
	클래스명<클래스> 객체명 = new 클래스명<클래스명>();
	ArrayList<Integer> list = new ArrayList<Integer>();


컬렉션 프레임워크	List Set Map

		필요한 자료구조를 미리 구현한 것
	

		종류	Collection 인터페이스
				List 인터페이스
				Set 인터페이스

			Map 인터페이스


		Collection 인터페이스 메소드

			boolean add(E e)		객체 e를 추가하여 성공 여부 반환/list는 무조건 true		
			void clear		비움
			Iterator<E> iterator()	반복자를 반환 > 반복문으로 활용 가능
			boolean remove(E e)	객체 e와 일치하는 객체 제거하고 제거 여부 반환 
						equals 오버라이딩 여하에 따라 결과 변함
						Objects.equals() -> equals() 호출
			int size()			저장된 개수 반환
			boolean contains(E e)	객체 e d있는지 확인하여 여부 반환 (이하는 remove 동일)


		List 인터페이스
			->중복 허용. 순서 보장.
			
			추가된 메소드(List에만 있는)	(번지와 관련된 메소드들)
		
				void add(int index, E e)
					index 번지에 객체 e를 추가하고 ->중복 허용x (무조건 추가)
				E set(int index, E e)
					index 번지의 객체 e로 수정하고 이전 객체 반환
				int indexOf(E e)
					객체 e와 일치하는 객체 있는 번지 반환. 없으면 -1
					equals 오버라이딩 여하에 따라 결과 변함
					Objects.equals() -> equals() 호출
				E remove(int index)
					index 번지 객체 제거 후 제거 객체 반환
				E get(index)
					index 번지 객체 반환
				
		
			구현 클래스
				ArrayList	배열로 만든 리스트
					탐색 빠름
					중간 삽입 삭제가 느림
	
				LinkedList 다음 요소를 각자 기억하게 만든 리스트
					탐색 느림
					삽입 삭제 빠름

				vector 	ArrayList 와 같음
					쓰레드 동기화 지원

				stack 	먼저 들어온 데이터 나중에 나감(위에서 쌓고 위에서 꺼냄)
					LIFO 구조 Last In First Out

				Queue	먼저 들어온 데이터가 먼저 나감
					FIFO 구조

		




					
		Set 인터페이스
			중복 허용 x -> 순서 보장 x

			구현 클래스

				HashSet
					Hash 알고리즘 이용
				TreeSet
					Tree 알고리즘 이용
			
		Map 인터페이스
			key, value 두 가지 데이터를 관리

			key 	중복x
			value	중복o

			메소드
				V put(K key, V value)
					key, value 추가. key 중복 시 value 덮어씀

				V get(K key)
					key와 일치하는 값의 value 반환
			
				boolean isEmpty
					비었는지를 반환
				
				Set keySet()
					key 값들을 하나의 Set으로 만들어서 반환
					map을 반복문을 활용하여 값을 확인할 때 사용
		
				V remove(K key)
					key와 일치하는 값이 있으면 제거하고 value를 반환


			구현 클래스
				 
				HashMap
					Hash 알고리즘 이용
				TreeMap
					Tree 알고리즘 이용
			
































		


	





			
































