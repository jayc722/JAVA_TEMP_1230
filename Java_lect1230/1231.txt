산술

		-결과가 숫자
		-+ - * / %
		-정수 연산 정수 => 정수
		- / 할 때 정수 / 정수 인지 확인 필요 (필요하다면 자료형변환)

대입

		-저장
		-오른쪽에 있는 값을 왼쪽에 저장
		

증감
	
		-최종적으로 1 증가, 1 감소
		- ++, --
		-전위형 : 증가를 하고 실행
		-후위형 : 실행을 하고 증가

비교

		-숫자의 크기 비교
		-결과가 true 또는 false
		-조건식
		- < > <= >= == !=
		- =와 ==를 혼동하면 안됨(조건문에서 많이 실수)
		- A는 B이다 A == B


논리

		-결과가 true , false
		-조건식
		- && || !
		- and or not
		-단락 회로 평가


복합 대입 연산자(결합 연산자)


		-연산자를 줄여씀


조건 연산자(조건 선택 연산자


		-삼항연산자
		-간단한 조건식을 사용할 때 활용
		- (조건식) ? 참 : 거짓;


비트연산자

		
		-비트를 나열한 후 논리 연산


연산자 우선순위

		-()가 제일 높다(헷갈릴 것 같으면 괄호)





정리

변수 
	변수를 선언할 수 있다
	
	변수 선언 방볍	자료형 변수명;
			자료형 변수명 = 초기값;
			자료형 변수명1, 변수명2;

자료형
	기본형	문자 char

		숫자 	정수 byte short int(4) long(8) (bigint) 	제일 왼쪽은 부호비트, 나머지를 이용하여 정수를 표현(표현 가능한 범위 제한-오버플로우, 언더플로우)
			실수 float(4, 소수점 6자리까지 정확) double(8, 소수점 15자리)			부동소수점 방식, 오차 발생

		논리	boolean(1바이트, true false)


참조형		-기본 자료형이 아닌 모든 타입, 주소를 저장
		String
		클래스, 인터페이스, 배열 등



변수명 작성 규칙
		대소문자 구별
		중복 선언 불가
		키워드(예약어) 사용 불가
		특수문자 _$만 가능
		첫 글자 숫자x

변수명 작성 관례
		의미 있게 작성
		카멜 표기법(두번째 단어부터 대문자)
		상수는 대문자로 작성 _로 단어 구분
		클래스는 대문자 시작

오버플로우	정수 범위를 벗어난 경우 변수에 있는 정수가 원하는 정수가 아니게 되는 현상
언더플로우



자료형 변환	변수 상수의 자료형을 일시적으로 바꾸는 방법

	강제 자료형 변환	자료형 변환을 하지 않으면 에러 발생
			큰 ->작은, 실수 ->정수, 정수 ->문자
			예외적인 경우) / 를 위해 자료형 변환 하는 경우 하지 않아도 에러는 발생하지 않음(1/2=0이 나옴)
			(자료형)형변환하려는 변수			

	자동 자료형 변환	자료형 변환을 표시하지 않더라도 자동으로 변환
			작은 ->큰, 정수 ->실수, 문자 ->정수


	
연산자		연산자 종류를 알고, 결과를 예측할 수 있다.

	대입	=
		오른쪽 값을 왼쪽에 저장

	산술	+-*/%
		/ 할때 유의 , % : 나머지

		
비교		숫자의 크기를 비교
		결과값이 true, flase(조건식)
		> < >= <= == !=
		참조형 변수에는 ==, !== 사용은 가능하나 비추 xxx.equals() !xxx.equals() ->클래스


논리연산자	결과값이 true false(조건식)
		&& || !
		
		
조건		3항 연산자
		간단한 조건문 대신 가능
		(조건식)? 참 : 거짓

증감		++ --
		최종적으로는 1증/감
		전위형은 증/감 하고 실행 후위형은 실행 후 증/감

복합대입연산자	간단하게 쓸때

조건문		상황에 따라 결과가 달라질 때 조건문을 활용할 수 있다. ~하면 ...해라 ~:조건식 ...:실행문
		
	if문	if(조건식1){
			실행문1;
		}
		else if(조건식2){
			실행문2;
		}
		else{
			실행문3;
		}
		조건문을 사용하려면 if는 반드시 나와야함. elseif는 0개이상, else는 0개 또는 1개 마지막

	swirch문	변수 또는 식의 특정 값들을 활용할 때 사용
		범위를 활용해야 하는 경우 사용하지 않음
		switch(식 또는 변수){
		case 값1:
		실행문1;
		break;
		case 값2:
		실행문2;
		break;
		default:
		}
		

반복문		규칙적인 작업이 필요핼 때 반복문을 활용할 수 있다
		for문, while문, do while문
		do while문은 반드시 1번은 실행

	for문	for(초기화 ; 조건식 ; 증감식){
		 실행문;
		}
		반복횟수를 초기화, 조건식, 증감식을 이용하여 조절
		초기화 : 생략 가능, 보통 조건식이나 실행문 변수 초기화할 때 사용, for문 실행 시 무조건 실행(1번만)
		조건식 : 생략 가능, 생략하면 무조건 참, 조건식이 true이면 실행문으로 이동, false이 되면 반복문을 종료
		증감식 : 생략 가능, 조건식에서 사용하는 변수를 증/감
		
		



