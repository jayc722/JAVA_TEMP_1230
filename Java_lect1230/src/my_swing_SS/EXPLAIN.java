package my_swing_SS;

public class EXPLAIN {

	// 스윙 + 서버로 학생 관리 프로그램 구현
	
	// 학생 클래스 : 학년 반 번호 이름 성적객체의리스트 앉은 자리
	// 비트 연산으로 앉은 자리 저장?(학년반번호...는? - 학번 변수를 만든다?)
	
	// 과목 클래스 : 학년 학기 과목명 담당선생님이름 
	
	// 성적 클래스 : 과목 객체, 점수
	
	// 계정 클래스 : 아이디, 비밀번호 (+수정이력?), boolean ath(admin - 일단은 미구현)
	
	// 학생 매니저(학생 객체 리스트)에서 학생 관리 프로그램 // 성적 매니저(성적 객체 리스트)에서 성적 관리 프로그램
	
	
	// 기본화면 -> 로그인 회원가입 종료 ( 종료버튼 안 눌러도 자동으로 저장 ) 로그인이나 회원가입을 누르면 새 창에서 로그인/회원가입 화면 띄움
	// 로그인 회원가입을 정상적으로 마쳤을 때, 처음 화면이 기본화면이라면(구분 방법 공부해야할듯...) 아이디 정보 넘겨줌.
	// 기본화면에서 아이디를 받으면, 아이디와 비밀번호를 계정 객체로 만들어 리스트에 올리고 화면을 학생 관리 화면으로 이동
	// 학생 관리, 과목 관리, 성적 관리, (학교 관리?), 뒤로 가기 -> 화면 이동
	
	
	// 학생 관리 : 추가 수정 삭제 조회 -> 화면 이동
	
	// 추가 : 버튼으로 1학년부터 3학년까지 중에 선택 > 1반부터 3반(n반?)까지 중에 선택
	// > 해당 학년 반의 학생을 1번부터 30번까지 추가 버튼과 함께 출력. 이미 학생이 채워진 번호는 버튼 비활성화.
	// 뒤로가기 버튼/나가기 버튼
	
	// 수정 : 추가와 동일. 대신 학생이 채워진 번호만 활성화.
	// 삭제 : 동일.
	
	
	// 과목 관리 : combobox 이용해서 1학년 2학년 3학년 선택해 해당 학년의 과목들을(학기 과목명 담당선생님이름 +평균?) 출력
	// 추가 수정 삭제 (과목별 성적 조회?) 버튼으로 해당 학년의 과목을 추가 수정 삭제
	
	// 성적 관리 : 이걸 어떻게 할까... 과목 관리나 학생 관리에 넣는게 나으려나...

	// (학교 관리) : 반의 담임선생님 이름 수정, 반의 과목평 평균 조회, ...
	// 자리 배치 -> 1부터 30까지 자리를 배열해서 30자리 비트연산 사용? 30자리 비트연산 for문으로 돌려서 카운트가 1이면 자리 변경(팝업 알림) 0이면 자리 선택(팝업 알림)
	// 해당 자리가 이미 있는 자리면 다른학생이면 불가(팝업 알림) 같은 학생이면 자리 해제(팝업 알림) 전체 해제 버튼, 랜덤 배치 버튼(30명보다 적을때 true면 앞에서부터 채워앉기. false면 빈자리 아무데나 앉기)
	//-> 팝업창 함수 하나 만들어서(텍스트 출력, 확인버튼) 함수 매개변수로 문자열("알림 내용")
	
	
	//매 시행마다 세이브 하도록 세이프 함수 넣어놓기
	
	
	
	
}
